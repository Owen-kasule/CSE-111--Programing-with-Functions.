 CSE 111 Proposal for a Student Chosen Program

    (This is a proposal. All proposals are written with our best
    knowledge at the beginning of a project. As we progress from the
    beginning to the end of a project, we gain more knowledge, and we
    change some of our proposed ideas. This is part of completing any
    project and is fine.  However, we still must write a proposal so
    that our teachers or supervisors know what we intend to do. Please
    answer each of the following questions to the best of your
    knowledge.)

1. What is the title of your program?
Calculator for basic and advanced operations.
2. What real-world problem will your program address or help to solve?
The program will provide a versatile and efficient tool to perform basic
arithmetic and advanced mathematical operational andthis calculator will be useful for students, educators and 
professional needing quick,reliable computations without requiring external software.
3. What will you learn from developing this program?
Writing well organised and reusable functions.
Implementing error handling to create a robust user experience.
Testing functions with pytest to ensure program accuracy.
4. What Python modules will your program use?
math (for advanced mathematical functions like square root and exponentiation)
pytest (for testing program functions)
Optionally: tkinter (for creating a GUI if added)
    (Some examples are: csv, datetime, functools, matplotlib, math,
    pandas, pytest, random, requests, and tkinter.)

5. List the names of functions you will need?
add(a, b): Adds two numbers.
subtract(a, b): Subtracts one number from another.
multiply(a, b): Multiplies two numbers.
divide(a, b): Divides one number by another (with error handling for division by zero).
get_number(prompt): Validates user input as a number.
main_menu(): Displays the calculator's main menu.
main(): Controls the program's flow, including calling other functions.
    (Remember that the most reusable functions don't get user input and
    don't print results but instead have parameters and return a result.
    Functions that get user input and print results are important and do
    useful work but are not easily reusable.)

    (Remember also that it's hard to test functions that get user input
    and print results. It's easy to test functions that don't get user
    input and don't print results but instead have parameters and return
    a result. Therefore, you should write most of your program functions
    to have parameters and return a result.)

6. List the names of the test functions you will write.
test_add(): Tests the add() function.
test_subtract(): Tests the subtract() function.
test_multiply(): Tests the multiply() function.
test_divide(): Tests the divide() function, including edge cases like division by zero.
Optional:
test_square_root(): Tests the square_root() function.
test_power(): Tests the power() function.
